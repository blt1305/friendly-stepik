import re

number = '2.13.1'
# Напишите любое регулярное выражение, которое находит само себя полным совпадением.
# Подсказка
# Используйте регулярное выражение и как регулярное выражение, и как тестовую строку.

s = r'Correct!'
print(number, s)
r = r'Correct!'
print(' ' * len(number), re.findall(r, s))
print()

number = '2.13.2'
# Напишите регулярное выражение, которое найдёт все слова «Ты» или «ты». Другие формы слова «ты», такие как «твой»
# и т. д. учитывать не следует.
# Нужно найти последовательности, подходящие по следующим условиям:
#
#     Последовательность ты или Ты
#     Не является подпоследовательностью

s = r'латынь по-латыни охоты анекдоты стыдлив кометы золотым балеты пустыне ты цветы ланиты открыты остыли бутылкой ' \
    r'отыскать суеты черты пустынным клеветы черты поэты предметы Ты'
print(number, s)
r = r'\b[Тт]ы\b'
print(' ' * len(number), re.findall(r, s))
print()

number = '2.13.3'
# Цвета в формате HEX - способ представления rgb-цветов в шестнадцатеричной системе счисления.
# Они состоят из 6 шестнадцатиричных чисел, каждая пара отвечает за свой цвет:
#     Две первые цифры — красный
#     Две в середине — зелёный
#     Две последние цифры — синий

# Напишите регулярное выражение, которое будет находить валидные hex-цвета.
# Нужно найти последовательности, подходящие по следующим условиям:
#
#     В начале стоит #
#     Потом идёт последовательность из 6 шестнадцатеричных цифр верхнего и нижнего регистров: 0123456789abcdefABCDEF
#     Последовательность не может быть подпоследовательностью

s = '#DC143C #00FA9A #00BFFF #FF00FF #EEE8A #FF #FFD7 #940 #483D8 #pressF'
print(number, s)
r = r'#[0-9a-fA-F]{6}'
print(' ' * len(number), re.findall(r, s))
print()

number = '2.13.4'
# Напишите регулярное выражение, которое найдёт все числа x, где:
# x ∈ [0, 1] т.е. 0 ≤ x ≤ 1
# Нужно найти числа x, подходящие по следующим условиям:
#     x ∈ [0, 1] т.е. 0 ≤ x ≤ 1
#     x может быть как и десятичной дробью, так и целым числом
#     Если x - десятичная дробь, то её максимальная точность должна быть до сотых
#     В тестах не будет 0.00/0.0 или 1.00/1.0. Эти числа будут записаны без плавающей точки
# (или использовано 2 раза, вначале оформлена десятичная дробь, потом или 0 или 1)
s = '0.3 1.32 1 -6 1 6 0.77 1 2 0.4 0 0.356 0.32 0.7'
print(number, s)
r = r'\b0\.[0-9]{1,2}\b|(?<=\s)1(?=\s|$)|(?<=\s)0(?=\s|$)'
print(' ' * len(number), re.findall(r, s))
print()

number = '2.13.5'
# Напишите регулярное выражение, которое найдёт все слова, содержащие в себе букву а.
# Нужно найти последовательности, подходящие по следующим условиям:
#
#     Используются буквы кириллического алфавита нижнего и верхнего регистров
#     Последовательность должна содержать как минимум одну букву а
#     Заглавную А искать не нужно
#     Последовательность не может быть подпоследовательностью

s = 'Не творог, а творог!!! '
# print(number, s)
r = r'\b[А-Яа-яЁё]*а[а-яё]*\b'
print(' ' * len(number), re.findall(r, s))
print()

number = '2.13.6'
# Напишите регулярное выражение, которое найдёт слова, после которых следующим символом идёт один из следующих знаков
# препинания: .,:?!;
s = 'Эй, Богдан, я здесь Эх, Богдан, Богдан, Богом дан Богдан, Богом дан, е Я Богдан, я Богом дан, меня Бог дал Я Богдан, ' \
    'я Богом дан'
print(number, s)
r = r'[а-яА-ЯёЁ]{1,}(?=[/./,/:/?/!/;])'
print(' ' * len(number), re.findall(r, s))
print()

number = '2.13.8'
# Напишите регулярное выражение, которое найдёт первое слово в тексте.
# Нужно найти последовательности, подходящие по следующим условиям:
#
#     Используются буквы кириллического алфавита верхнего и нижнего регистров
#     В последовательности может содержаться дефис
#     Последовательность стоит в начале строки, если её нет - первого слова нет
s = 'Какой-то текст'
print(number, s)
r = r'^([а-яА-ЯёЁ-]+)'
print(' ' * len(number), re.findall(r, s))
print()

number = '2.13.9'
# Найдите все слова, которые начинаются на n или N.
# Нужно найти последовательности, подходящие по следующим условиям:
#
#     Состоит из букв латинского алфавита нижнего и верхнего регистров, -
#     Начинается на n или N
#     Не может быть подпоследовательностью
# Чтобы не захватывать ненужные слова: перед словом должен стоять либо пробел, либо начало строки. После слова либо пробел, либо конец строки.
s = '_n-word 0n-word 1n-word 2n-word 3n-word 4n-word -n-word'
print(number, s)
r = r'(?:(?<=\s)|(?<=^))([nN][a-zA-Z-]+)(?:(?=\s)|(?=$))'
print(' ' * len(number), re.findall(r, s))
print()

number = '2.13.10'
# Напишите регулярное выражение, которое найдёт все переменные, записанные в стиле lowerCamelCase.
# Нужно найти переменные, записаные в стиле lowerCamelCase, который включает в себя следующее:
#
#     Первое слово начинается всегда с буквы нижнего регистра
#     Последующие слова начинаются с букв в верхнем регистре
#     Больше верхний регистр нигде не используется
#     Используются буквы латинского алфавита
#     Цифры в переменных из тестовых данных находятся только в конце
#
# Примеры использования:
#     variable
#     quiteLongVariable
#     twoWords

s = 'variableWithNumbers3134 anotherOne1 another1'
print(number, s)
r = r'\b[a-z]+(?:[A-Z][a-z]+)*[0-9]*\b'
print(' ' * len(number), re.findall(r, s))
print()

number = '2.13.11'
# Напишите регулярное выражение, которое найдёт все переменные, записанные в стиле snake_case.
#
# Как вы уже поняли - snake_case это тоже стиль наименования переменных. В Python переменные принято называть,
# используя этот стиль. Вот что он из себя представляет:
#     Всегда используется нижний регистр
#     Слова разделяются нижним подчёркиванием
#     Используются буквы латинского алфавита
#     Цифры в переменных из тестовых данных находятся только в конце.
#
# Примеры использования:
#     variable
#     quite_long_variable
#     two_words

s = 'just_a_variable Wrong_Variable SendNudes doubleShibaInu '
print(number, s)
r = r'\b[a-z]+(?:_[a-z]+)*(?:_[0-9]+)*\b'
print(' ' * len(number), re.findall(r, s))
print()

number = '2.13.13'
# Найдите в тексте все названия файлов и их расширения.
#
# Нужно найти последовательности, подходящие по следующим условиям:
#
#     Название файла состоит из: букв латинского алфавита верхнего и нижнего регистров, цифр, -
#     Между названием и расширением файла стоит .
#     Расширение файла состоит из букв латинского алфавита верхнего и нижнего регистров, цифр
#     Минимальная длина названия и расширения - один символ
#     Найденная последовательность может являться подпоследовательностью, только если стоит в абсолютном или относительном пути:
#     C:\Users\test.txt, ../Users/test.txt, т.е. перед ней стоят символы / или \

s = 'Untitled-1.psd Untitled-1.jpg video.mp4'
print(number, s)
r = r'(?<=\\|\/)[a-zA-Z0-9\-]{1,}\.[a-zA-Z0-9]{1,}'
print(' ' * len(number), re.findall(r, s))
print()

number = '2.13.14'
# Получите все идентификаторы видеороликов на YouTube, используя регулярные выражения.
# Нужно найти последовательности, подходящие по следующим условиям:
#
#     Cостоит из символов латинского алфавита обоих регистров, цифр, а также _
#     Перед последовательностью стоит v=
s = 'https://youtu.be/watch?v=dQw4w9WgXcQ&list=PLi9drqWffJ9FWBo7ZVOiaVy0UQQEm4IbP'
print(number, s)
r = r'(?<=v\=)[a-zA-Z0-9_]{1,}'
print(' ' * len(number), re.findall(r, s))
print()

number = '2.13.15'
# Найдите все валидные пустые массивы, или массивы с числами. Числом считаем произвольную последовательность из цифр.
# Что нужно найти:
#
# Нужно найти последовательности, подходящие по следующим условиям:
#
#     Начинается с [ и заканчиваются на ]
#     Внутри может быть пусто, а могут находиться числа
#     Числом считаем произвольную последовательность из цифр
#     Между числами должны стоять запятые
#     Запятые могут быть как и с пробелом, так и без
#     После последнего числа может стоять запятая, т.к. такие массивы: [123, 123, ] и [23, ] валидные в Python

s = '[1234, 04] [423423, 582945023, 94235020, 0852] [2525, 0][, 123, 123][, ][,324]'
print(s)
r = r'\[(?:\d{1,},\s{0,1}){0,}\d*,*\]'
print(' ' * len(number), re.findall(r, s))
print()

number = '2.13.7'
# Очень часто студенты в своих проектах, исследованиях, диссертациях, курсовых и дипломных работах заменяют символы
# кириллицы на другие, похожие на символы русского алфавита, пытаясь спрятать следы использованных источников.
#
# Помогите написать регулярное выражение, которое находит все:
#     Слова, состоящие из кириллических символов, но в них есть как минимум 1 некириллический символ
#     Слова, состоящие из некириллических символов, но в них есть как минимум 1 кириллический символ

# Нужно найти последовательности, подходящие по следующим условиям:
#     Состоит из кириллических символов, но в ней есть как минимум 1 некириллический символ
#     Состоит из некириллических символов, но в ней есть как минимум 1 кириллический символ
#     Последовательности, состоящие полностью из кириллических или некириллических символов нужно игнорировать
#     Используются буквы верхнего и нижнего регистров
#     Знаки препинания не считаются некириллическими символами
#     Не может являться подпоследовательностью

# s = 'О, х0т табc. A что такое табс? Я зашéл нe туда, кyда н4до. Почему это твич не 3абанил - не совсем понятно. ' \
#     'Господа, я полагаю стрим надо быстро заканчивать, и удалять...'
# print(number, s)
# r = r'[A-Za-z]'
# print(' ' * len(number), re.findall(r, s))
# print()

number = '2.13.13'
# Найдите в тексте все названия файлов и их расширения.
#
# Нужно найти последовательности, подходящие по следующим условиям:
#     Название файла состоит из: букв латинского алфавита верхнего и нижнего регистров, цифр, -
#     Между названием и расширением файла стоит .
#     Расширение файла состоит из букв латинского алфавита верхнего и нижнего регистров, цифр
#     Минимальная длина названия и расширения - один символ
#     Найденная последовательность может являться подпоследовательностью, только если стоит в абсолютном или
#     относительном пути: C:\Users\test.txt, ../Users/test.txt, т.е. перед ней стоят символы / или \

# s = 'c#logs.txt query.$exe'
# print(s)
# r = r'[^\s\\\/](?:[A-Za-z0-9\-])+\.(?:[A-Za-z0-9])+\b'
# print(' ' * len(number), re.findall(r, s))
# print()

all_ex = ['Untitled-1.psd Untitled-1.jpg video.mp4',
          'CUsers\matv3\Desktop\script.js index.html @/assets/images/logo.svg', 'bot.py sad.gif',
          '.mp4 some-text .py', 'test... te..st', 'файл.file файл.файл file.файл фfile.фfile fфile.fфile',
          'c#logs.txt query.$exe', ':a.json  ?s.csv']
for i in all_ex:
    r = r'\b(?:[\\\/])?(?:[A-Za-z0-9\-])+\.(?:[A-Za-z0-9])+\b'
    print(i)

    print(re.findall(r, i))
    print()
